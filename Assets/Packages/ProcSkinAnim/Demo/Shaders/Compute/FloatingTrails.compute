#pragma kernel Setup
#pragma kernel Update
#pragma kernel Apply

#include "../Common/TrailCompute.cginc"

CBUFFER_START(Floating)

float4 _Attractor;
float _Throttle;

CBUFFER_END

THREAD
void Setup(uint3 id : SV_DispatchThreadID)
{
  DISCARD

  int index = id.x * _BonesCount;

  float3 offset = random_point_on_sphere(id.xy) * _Attractor.w;

  for (int i = 0; i < _BonesCount; i++)
  {
    GPUTrail tr = Create(index, i);
    tr.position += offset;
    _Trails[index + i] = tr;
  }
}

// Attractor position with spread parameter
float3 AttractorPosition(uint id)
{
  float u = nrand(id, 1) * PI * 2;
  float z = nrand(id, 2) * 2 - 1;
  float l = nrand(id, 3);
  float3 d = float3(float2(cos(u), sin(u)) * sqrt(1 - z * z), z) * sqrt(l);
  return _Attractor.xyz + d * _Attractor.w;
}

// Move header of Trails.
void Header(int index)
{
  GPUTrail head = _Trails[index];

  float3 v = head.velocity;

  // Drag 
  v.xyz = v.xyz * _Damper.x + _Gravity.xyz;

  float3 dir = AttractorPosition(index) - head.position.xyz;
  // v.xyz += _DT.x * 0.1 * normalize(dir) * head.speed;
  v.xyz += _DT.x * 0.1 * dir * head.speed;

  float3 seed = head.position.xyz;
  float3 np = (seed + _NoiseOffset) * _NoiseParams.x;
  float3 n1 = snoise_grad(np);
  float3 n2 = snoise_grad(np + float3(21.83, 13.28, 7.32));
  v.xyz += cross(n1, n2) * _NoiseParams.y * head.speed;

  head.velocity = v;

  float lv = max(length(v.xyz), 1e-6);
  v.xyz = v.xyz * min(lv, _Damper.y) / lv;

  head.position.xyz += v.xyz * _DT.x;

  _Trails[index] = head;
}

void Sequence(int index)
{
  int i;

  // Children trails Follow a header trail.
  float dt = _DT.x * _TrailFollowIntensity;
  for (i = 1; i < _BonesCount; i++)
  {
    GPUTrail parent = _Trails[index + i - 1];
    GPUTrail child = _Trails[index + i];

    float3 dir = parent.position - child.position;
    float l = length(dir);
    float t = 1.0 - i * _BonesCountInv;

    child.position = lerp(child.position, child.position + smoothstep(0, _UnitLength, l) * dir, dt * lerp(_TrailFollowDelay.x, _TrailFollowDelay.y, t));

    _Trails[index + i] = child;
  }

  // Calcuate sequencial TNB vectors.

  // Calculate a head TNB.
  GPUTrail head = _Trails[index];
  float3 p0 = head.position.xyz;
  float3 p1 = _Trails[index + 1].position.xyz;

  float3 t0 = normalize(p0 - p1);
  float3 b0 = normalize(cross(t0, normalize(p0)));
  float3 n0 = normalize(cross(b0, t0));

  head.tangent = t0;
  head.normal = n0;
  head.binormal = b0;
  _Trails[index] = head;

  // Calculate children TNBs.
  for (i = 1; i < _BonesCount - 1; i++)
  {
    p0 = _Trails[index + i - 1].position.xyz;
    float3 p2 = _Trails[index + i + 1].position.xyz;

    float3 t1 = normalize(p0 - p2);
    float3 n1 = normalize(cross(b0, t1));

    GPUTrail cur = _Trails[index + i];
    cur.tangent = t1;
    cur.normal = n1;
    cur.binormal = b0;
    _Trails[index + i] = cur;

    b0 = normalize(cross(t1, n1));
  }

  // Calculate a tail TNB.
  GPUTrail tail = _Trails[index + _BonesCount - 1];

  p0 = _Trails[index + _BonesCount - 2].position.xyz;
  p1 = tail.position.xyz;

  float3 t1 = normalize(p0 - p1);
  float3 n1 = normalize(cross(b0, t1));

  tail.tangent = t1;
  tail.normal = n1;
  tail.binormal = b0;

  _Trails[index + _BonesCount - 1] = tail;
}

THREAD
void Update(uint3 id : SV_DispatchThreadID)
{
  DISCARD

  int index = id.x * _BonesCount;
  Header(index);
  Sequence(index);
}

THREAD
void Apply(uint3 id : SV_DispatchThreadID)
{
  DISCARD

  bool alive = (nrand(id.xy) < _Throttle);

  float4x4 moffset = _LocalToWorld;
  int ioffset = id.x * _BonesCount;
  for (int i = 0; i < _BonesCount; i++)
  {
    int index = ioffset + i;
    GPUBone bone = _Bones[index];
    GPUTrail tr = _Trails[index];

    // Copy position and rotation from GPUTrail to GPUBone

    // global to local matrix
    float4x4 conv = mul(mul(inverse(bone.local), inverse(moffset)), _LocalToWorld);

    // Calculate transform in local space.
    float3 translation = mul(conv, float4(tr.position.xyz, 1)).xyz;
    // float4x4 rotation = mul(conv, axis_matrix(normalize(tr.binormal), normalize(tr.tangent), normalize(tr.normal)));
    float4x4 rotation = mul(conv, axis_matrix(tr.binormal, tr.tangent, tr.normal));

    // Set diff TR in local space
    bone.position = translation;
    bone.rotation = extract_rotation_matrix(rotation);
    bone.scale = lerp(bone.scale, (lerp(0, 1, alive)).xxx, _DT.x * 2.0);

    _Bones[index] = bone;

    float4x4 diff = GetBoneMatrix(bone);
    moffset = mul(moffset, mul(diff, bone.local));
  }

}

